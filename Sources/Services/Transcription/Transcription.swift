//
//  Transcription.swift
//  ALog
//
//  Created by Xin Du on 2023/07/15.
//

import Foundation
import XLog

enum TranscriptionError: LocalizedError {
    case invalidCustomServer
    
    var errorDescription: String? {
        switch self {
        case .invalidCustomServer: return L(.error_invalid_custom_server)
        default: return ""
        }
    }
}

struct Transcription {
    
    private let TAG = "Trans"
    
    let hallucinationList: Set<String> = [
        "ËØ∑‰∏çÂêùÁÇπËµû ËÆ¢ÈòÖ ËΩ¨Âèë ÊâìËµèÊîØÊåÅÊòéÈïú‰∏éÁÇπÁÇπÊ†èÁõÆ",
        "Ë´ã‰∏çÂêùÈªûË¥äË®ÇÈñ±ËΩâÁôºÊâìË≥ûÊîØÊåÅÊòéÈè°ËàáÈªûÈªûÊ¨ÑÁõÆ",
        "Â≠óÂπïÁî±Amara.orgÁ§æÂå∫Êèê‰æõ",
        "Â∞èÁ∑®Â≠óÂπïÁî±Amara.orgÁ§æÂçÄÊèê‰æõ",
        "Â≠óÂπïbyÁ¥¢ÂÖ∞Â®Ö",
        "Áî± Amara.org Á§æÁæ§Êèê‰æõÁöÑÂ≠óÂπï"
    ]
    
    func transcribe(voiceURL: URL, provider: TranscriptionProvider, lang: TranscriptionLang) async throws -> String {
        XLog.info("Transcribe \(voiceURL.lastPathComponent) using \(provider). lang = \(lang.rawValue)", source: TAG)
        if provider == .apple {
            let text = try await SpeechRecognizer.shared.transcribe(voiceURL, lang: lang)
            return text
        } else if provider == .openai {
            if Config.shared.serverType == .custom && !Config.shared.isServerSet {
                throw TranscriptionError.invalidCustomServer
            }
            
            let text = try await OpenAIClient.shared.transcribe(voiceURL, lang: lang).text
            if hallucinationList.contains(text) {
                XLog.info("üòµ‚Äçüí´ skip '\(text)'", source: TAG)
                return ""
            }
            return text
        }
        return ""
    }
    
}
